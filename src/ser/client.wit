world serde-serializer-client {
    import serializer: serde-serializer
    export serialize: serde-serialize
}

interface serde-serialize {
    use { serializer, ser-ok, ser-error } from serde-serializer

    resource serialize {
        serialize: func(serializer: serializer) -> result<ser-ok, ser-error>
    }
}

interface serde-serializer {
    resource serializer {
        serialize-bool: func(v: bool) -> result<ser-ok, ser-error>
        serialize-i8: func(v: s8) -> result<ser-ok, ser-error>
        serialize-i16: func(v: s16) -> result<ser-ok, ser-error>
        serialize-i32: func(v: s32) -> result<ser-ok, ser-error>
        serialize-i64: func(v: s64) -> result<ser-ok, ser-error>
        serialize-i128: func(v: s128) -> result<ser-ok, ser-error>
        serialize-u8: func(v: u8) -> result<ser-ok, ser-error>
        serialize-u16: func(v: u16) -> result<ser-ok, ser-error>
        serialize-u32: func(v: u32) -> result<ser-ok, ser-error>
        serialize-u64: func(v: u64) -> result<ser-ok, ser-error>
        serialize-u128: func(v: u128) -> result<ser-ok, ser-error>
        serialize-f32: func(v: float32) -> result<ser-ok, ser-error>
        serialize-f64: func(v: float64) -> result<ser-ok, ser-error>
        serialize-char: func(v: char) -> result<ser-ok, ser-error>
        serialize-str: func(v: string) -> result<ser-ok, ser-error>
        serialize-bytes: func(v: list<u8>) -> result<ser-ok, ser-error>
        serialize-none: func() -> result<ser-ok, ser-error>
        serialize-some: func(value: serialize) -> result<ser-ok, ser-error>
        serialize-unit: func() -> result<ser-ok, ser-error>
        serialize-unit-struct: func(name: string) -> result<ser-ok, ser-error>
        serialize-unit-variant: func(name: string, variant-index: u32, variant: string) -> result<ser-ok, ser-error>
        serialize-newtype-struct: func(name: string, value: serialize) -> result<ser-ok, ser-error>
        serialize-newtype-variant: func(name: string, variant-index: u32, variant: string, value: serialize) -> result<ser-ok, ser-error>
        serialize-seq: func(len: option<usize>) -> result<serialize-seq, ser-error>
        serialize-tuple: func(len: usize) -> result<serialize-tuple, ser-error>
        serialize-tuple-struct: func(name: string, len: usize) -> result<serialize-tuple-struct, ser-error>
        serialize-tuple-variant: func(name: string, variant-index: u32, variant: string, len: usize) -> result<serialize-tuple-variant, ser-error>
        serialize-map: func(len: option<usize>) -> result<serialize-map, ser-error>
        serialize-struct: func(name: string, len: usize) -> result<serialize-struct, ser-error>
        serialize-struct-variant(name: string, variant-index: u32, variant: string, len: usize) -> result<serialize-struct-variant, ser-error>
        is-human-readable: func() -> bool
    }

    resource serialize-seq {
        serialize-element: func(value: serialize) -> result<_, ser-error>
        end: func() -> result<ser-ok, ser-error>
    }

    resource serialize-tuple {
        serialize-element: func(value: serialize) -> result<_, ser-error>
        end: func() -> result<ser-ok, ser-error>
    }

    resource serialize-tuple-struct {
        serialize-field: func(value: serialize) -> result<_, ser-error>
        end: func() -> result<ser-ok, ser-error>
    }

    resource serialize-tuple-variant {
        serialize-field: func(value: serialize) -> result<_, ser-error>
        end: func() -> result<ser-ok, ser-error>
    }

    resource serialize-map {
        serialize-key: func(key: serialize) -> result<_, ser-error>
        serialize-value: func(value: serialize) -> result<_, ser-error>
        end: func() -> result<ser-ok, ser-error>
        serialize-entry: func(key: serialize, value: serialize) -> result<_, ser-error>
    }

    resource serialize-struct {
        serialize-field: func(key: string, value: serialize) -> result<_, ser-error>
        end: func() -> result<ser-ok, ser-error>
        skip-field: func(key: string) -> result<_, ser-error>
    }

    resource serialize-struct-variant {
        serialize_field: func(key: string, value: serialize) -> result<_, ser-error>
        end: func() -> result<ser-ok, ser-error>
        skip-field: func(key: string) -> result<_, ser-rror>
    }

    resource ser-ok {
        // opaque to serialize
    }

    resource ser-error {
        static custom: func(msg: string) -> ser-error
    }

    record s128 {
        hi: u64,
        lo: u64,
    }

    record u128 {
        hi: u64,
        lo: u64,
    }

    record usize {
        val: u32,
    }
}

world serde-serializer-client {
    import serializer: serde-serializer
    export serialize: serde-serialize
}

interface serde-serialize {
    use { serializer, ser-ok, ser-error } from serde-serializer

    resource serialize {
        serialize: func(serializer: serializer) -> expected<ser-ok, ser-error>
    }
}

interface serde-serializer {
    resource serializer {
        serialize-bool: func(v: bool) -> expected<ser-ok, ser-error>
        serialize-i8: func(v: s8) -> expected<ser-ok, ser-error>
        serialize-i16: func(v: s16) -> expected<ser-ok, ser-error>
        serialize-i32: func(v: s32) -> expected<ser-ok, ser-error>
        serialize-i64: func(v: s64) -> expected<ser-ok, ser-error>
        serialize-i128: func(v: s128) -> expected<ser-ok, ser-error>
        serialize-u8: func(v: u8) -> expected<ser-ok, ser-error>
        serialize-u16: func(v: u16) -> expected<ser-ok, ser-error>
        serialize-u32: func(v: u32) -> expected<ser-ok, ser-error>
        serialize-u64: func(v: u64) -> expected<ser-ok, ser-error>
        serialize-u128: func(v: u128) -> expected<ser-ok, ser-error>
        serialize-f32: func(v: float32) -> expected<ser-ok, ser-error>
        serialize-f64: func(v: float64) -> expected<ser-ok, ser-error>
        serialize-char: func(v: char) -> expected<ser-ok, ser-error>
        serialize-str: func(v: string) -> expected<ser-ok, ser-error>
        serialize-bytes: func(v: list<u8>) -> expected<ser-ok, ser-error>
        serialize-none: func() -> expected<ser-ok, ser-error>
        serialize-some: func(value: serialize) -> expected<ser-ok, ser-error>
        serialize-unit: func() -> expected<ser-ok, ser-error>
        serialize-unit-struct: func(name: string) -> expected<ser-ok, ser-error>
        serialize-unit-variant: func(name: string, variant-index: u32, variant: string) -> expected<ser-ok, ser-error>
        serialize-newtype-struct: func(name: string, value: serialize) -> expected<ser-ok, ser-error>
        serialize-newtype-variant: func(name: string, variant-index: u32, variant: string, value: serialize) -> expected<ser-ok, ser-error>
        is-human-readable: func() -> bool
    }

    resource ser-ok {
        // opaque to serialize
    }

    resource ser-error {
        static custom: func(msg: string) -> ser-error
    }

    record s128 {
        hi: u64,
        lo: u64,
    }

    record u128 {
        hi: u64,
        lo: u64,
    }
}
